// <auto-generated />
using System;
using Marketplace.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Marketplace.Data.Migrations
{
    [DbContext(typeof(MarketplaceDbContext))]
    [Migration("20240529180631_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("WolverineEnabled", "true");

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Marketplace.Data.Entities.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<int>("ApplicationUserId")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RefreshTokenExpiry")
                        .HasColumnType("datetime2");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "a5ac5ebb-5f11-4363-a58d-4362d8ff6863",
                            AccessFailedCount = 0,
                            ApplicationUserId = 0,
                            ConcurrencyStamp = "d390510b-1631-42cd-af08-1c6184a51d45",
                            Email = "admin@localhost",
                            EmailConfirmed = true,
                            FirstName = "System",
                            LastName = "Administrator",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@LOCALHOST",
                            NormalizedUserName = "ADMIN@LOCALHOST",
                            PasswordHash = "AQAAAAIAAYagAAAAECkxmrPhjQdbUsekNI5uuJpeYDOOfo/0QkiMMNE+JxS2Qrro6QPvAWAEK6/b/hAo8Q==",
                            PhoneNumberConfirmed = false,
                            RefreshTokenExpiry = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Role = "Adminstrator",
                            SecurityStamp = "3b882abd-b1ed-4f09-bc23-7e35e1e97b40",
                            TwoFactorEnabled = false,
                            UserName = "admin@localhost"
                        },
                        new
                        {
                            Id = "69a38a69-e24d-4c7f-bdf2-c7bc2222cbe7",
                            AccessFailedCount = 0,
                            ApplicationUserId = 0,
                            ConcurrencyStamp = "c610cc21-539b-497e-b662-ef096e4afe26",
                            Email = "demouser@localhost",
                            EmailConfirmed = true,
                            FirstName = "Demo",
                            LastName = "User",
                            LockoutEnabled = false,
                            NormalizedEmail = "DEMOUSER@LOCALHOST",
                            NormalizedUserName = "DEMOUSER@LOCALHOST",
                            PasswordHash = "AQAAAAIAAYagAAAAEJnpDwsI/3+lVtRHhNefc2ZXBKLdQwRLOfWUkAI666Uf5q/oQmGjhYY7uDrZVYGGQw==",
                            PhoneNumberConfirmed = false,
                            RefreshTokenExpiry = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Role = "User",
                            SecurityStamp = "9aa47184-f48a-47f6-b15d-086c46598a7c",
                            TwoFactorEnabled = false,
                            UserName = "demouser@localhost"
                        });
                });

            modelBuilder.Entity("Marketplace.Data.Entities.Card", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Colour")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool?>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<int?>("ListingId")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("ListingId");

                    b.ToTable("Cards", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Colour = "Blue",
                            CreatedBy = "",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "This is a sample card",
                            IsEnabled = true,
                            ListingId = 1,
                            ModifiedBy = "",
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Sample Card"
                        },
                        new
                        {
                            Id = 2,
                            Colour = "Red",
                            CreatedBy = "",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "This is another card",
                            IsEnabled = false,
                            ListingId = 1,
                            ModifiedBy = "",
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Another Card"
                        },
                        new
                        {
                            Id = 3,
                            Colour = "Green",
                            CreatedBy = "",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "This is the third card",
                            IsEnabled = true,
                            ListingId = 1,
                            ModifiedBy = "",
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Third Card"
                        });
                });

            modelBuilder.Entity("Marketplace.Data.Entities.Document", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Bytes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("DocumentType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ProductDetailId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("ProductDetailId");

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("Marketplace.Data.Entities.Listing", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Listings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedBy = "John Doe",
                            CreatedDate = new DateTime(2024, 5, 29, 19, 6, 31, 310, DateTimeKind.Local).AddTicks(1578),
                            ModifiedBy = "John Doe",
                            ModifiedDate = new DateTime(2024, 5, 29, 19, 6, 31, 310, DateTimeKind.Local).AddTicks(1593),
                            Title = "Sample Listing"
                        });
                });

            modelBuilder.Entity("Marketplace.Data.Entities.Media", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DirectoryPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FilePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MediaType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ProductDetailId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProductDetailId");

                    b.ToTable("Files");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedBy = "",
                            CreatedDate = new DateTime(2024, 5, 29, 19, 6, 31, 308, DateTimeKind.Local).AddTicks(7911),
                            Description = "This is a sample media file",
                            DirectoryPath = "media",
                            FilePath = "sample.mp4",
                            MediaType = "video",
                            ModifiedBy = "",
                            ModifiedDate = new DateTime(2024, 5, 29, 19, 6, 31, 308, DateTimeKind.Local).AddTicks(7964),
                            Title = "Sample Media"
                        },
                        new
                        {
                            Id = 2,
                            CreatedBy = "",
                            CreatedDate = new DateTime(2024, 5, 29, 19, 6, 31, 308, DateTimeKind.Local).AddTicks(7968),
                            Description = "This is a sample media file",
                            DirectoryPath = "media",
                            FilePath = "sample.mp4",
                            MediaType = "video",
                            ModifiedBy = "",
                            ModifiedDate = new DateTime(2024, 5, 29, 19, 6, 31, 308, DateTimeKind.Local).AddTicks(7970),
                            Title = "Sample Media"
                        },
                        new
                        {
                            Id = 3,
                            CreatedBy = "",
                            CreatedDate = new DateTime(2024, 5, 29, 19, 6, 31, 308, DateTimeKind.Local).AddTicks(7973),
                            Description = "This is a sample media file",
                            DirectoryPath = "media",
                            FilePath = "sample.mp4",
                            MediaType = "video",
                            ModifiedBy = "",
                            ModifiedDate = new DateTime(2024, 5, 29, 19, 6, 31, 308, DateTimeKind.Local).AddTicks(7974),
                            Title = "Sample Media"
                        });
                });

            modelBuilder.Entity("Marketplace.Data.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CardId")
                        .HasColumnType("int");

                    b.Property<string>("Category")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ProductDetailId")
                        .HasColumnType("int");

                    b.Property<string>("ProductType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CardId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CardId = 1,
                            Category = "Sample Category",
                            CreatedBy = "Sample User",
                            CreatedDate = new DateTime(2024, 5, 29, 19, 6, 31, 309, DateTimeKind.Local).AddTicks(7484),
                            Description = "This is a sample product",
                            IsDeleted = false,
                            IsEnabled = true,
                            ModifiedBy = "Sample User",
                            ModifiedDate = new DateTime(2024, 5, 29, 19, 6, 31, 309, DateTimeKind.Local).AddTicks(7500),
                            ProductDetailId = 21,
                            ProductType = "Sample Type",
                            Title = "Sample Product"
                        },
                        new
                        {
                            Id = 2,
                            CardId = 1,
                            Category = "Another Sample Category",
                            CreatedBy = "Another Sample User",
                            CreatedDate = new DateTime(2024, 5, 29, 19, 6, 31, 309, DateTimeKind.Local).AddTicks(7505),
                            Description = "This is another sample product",
                            IsDeleted = false,
                            IsEnabled = true,
                            ModifiedBy = "Another Sample User",
                            ModifiedDate = new DateTime(2024, 5, 29, 19, 6, 31, 309, DateTimeKind.Local).AddTicks(7507),
                            ProductDetailId = 22,
                            ProductType = "Another Sample Type",
                            Title = "Another Sample Product"
                        },
                        new
                        {
                            Id = 3,
                            CardId = 1,
                            Category = "Third Sample Category",
                            CreatedBy = "Third Sample User",
                            CreatedDate = new DateTime(2024, 5, 29, 19, 6, 31, 309, DateTimeKind.Local).AddTicks(7511),
                            Description = "This is the third sample product",
                            IsDeleted = false,
                            IsEnabled = true,
                            ModifiedBy = "Third Sample User",
                            ModifiedDate = new DateTime(2024, 5, 29, 19, 6, 31, 309, DateTimeKind.Local).AddTicks(7513),
                            ProductDetailId = 23,
                            ProductType = "Third Sample Type",
                            Title = "Third Sample Product"
                        });
                });

            modelBuilder.Entity("Marketplace.Data.Entities.ProductDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId")
                        .IsUnique()
                        .HasFilter("[ProductId] IS NOT NULL");

                    b.ToTable("ProductDetails");

                    b.HasData(
                        new
                        {
                            Id = 30,
                            CreatedBy = "John Doe",
                            CreatedDate = new DateTime(2024, 5, 29, 19, 6, 31, 309, DateTimeKind.Local).AddTicks(1163),
                            Description = "This is a sample product detail",
                            ModifiedBy = "John Doe",
                            ModifiedDate = new DateTime(2024, 5, 29, 19, 6, 31, 309, DateTimeKind.Local).AddTicks(1180),
                            Title = "Sample Product Detail"
                        },
                        new
                        {
                            Id = 31,
                            CreatedBy = "Jane Smith",
                            CreatedDate = new DateTime(2024, 5, 29, 19, 6, 31, 309, DateTimeKind.Local).AddTicks(1183),
                            Description = "This is another sample product detail",
                            ModifiedBy = "Jane Smith",
                            ModifiedDate = new DateTime(2024, 5, 29, 19, 6, 31, 309, DateTimeKind.Local).AddTicks(1185),
                            Title = "Another Sample Product Detail"
                        },
                        new
                        {
                            Id = 32,
                            CreatedBy = "John Doe",
                            CreatedDate = new DateTime(2024, 5, 29, 19, 6, 31, 309, DateTimeKind.Local).AddTicks(1188),
                            Description = "This is yet another sample product detail",
                            ModifiedBy = "John Doe",
                            ModifiedDate = new DateTime(2024, 5, 29, 19, 6, 31, 309, DateTimeKind.Local).AddTicks(1190),
                            Title = "Yet Another Sample Product Detail"
                        });
                });

            modelBuilder.Entity("Marketplace.Data.Entities.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TagId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TagId");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("Marketplace.Data.Entities.UserProfile", b =>
                {
                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Bio")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SocialMedia")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ApplicationUserId");

                    b.ToTable("Profiles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "00917cdb-f5b0-4c84-9172-ff5b72ff8500",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        },
                        new
                        {
                            Id = "e23ba8c8-b3ae-4e81-b468-c269c6e35cf2",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "a5ac5ebb-5f11-4363-a58d-4362d8ff6863",
                            RoleId = "00917cdb-f5b0-4c84-9172-ff5b72ff8500"
                        },
                        new
                        {
                            UserId = "69a38a69-e24d-4c7f-bdf2-c7bc2222cbe7",
                            RoleId = "e23ba8c8-b3ae-4e81-b468-c269c6e35cf2"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Wolverine.EntityFrameworkCore.Internals.IncomingMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<int>("Attempts")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("attempts");

                    b.Property<byte[]>("Body")
                        .IsRequired()
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("body");

                    b.Property<DateTimeOffset?>("ExecutionTime")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("execution_time");

                    b.Property<string>("MessageType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("message_type");

                    b.Property<int>("OwnerId")
                        .HasColumnType("int")
                        .HasColumnName("owner_id");

                    b.Property<string>("ReceivedAt")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("received_at");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("status");

                    b.HasKey("Id");

                    b.ToTable("wolverine_incoming_envelopes", "wolverine", t =>
                        {
                            t.ExcludeFromMigrations();
                        });
                });

            modelBuilder.Entity("Wolverine.EntityFrameworkCore.Internals.OutgoingMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<int>("Attempts")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("attempts");

                    b.Property<byte[]>("Body")
                        .IsRequired()
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("body");

                    b.Property<DateTimeOffset?>("DeliverBy")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("deliver_by");

                    b.Property<string>("Destination")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("destination");

                    b.Property<string>("MessageType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("message_type");

                    b.Property<int>("OwnerId")
                        .HasColumnType("int")
                        .HasColumnName("owner_id");

                    b.HasKey("Id");

                    b.ToTable("wolverine_outgoing_envelopes", "wolverine", t =>
                        {
                            t.ExcludeFromMigrations();
                        });
                });

            modelBuilder.Entity("Marketplace.Data.Entities.Card", b =>
                {
                    b.HasOne("Marketplace.Data.Entities.Listing", "Listing")
                        .WithMany("Cards")
                        .HasForeignKey("ListingId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Listing");
                });

            modelBuilder.Entity("Marketplace.Data.Entities.Document", b =>
                {
                    b.HasOne("Marketplace.Data.Entities.ProductDetail", "ProductDetail")
                        .WithMany("Documents")
                        .HasForeignKey("ProductDetailId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("ProductDetail");
                });

            modelBuilder.Entity("Marketplace.Data.Entities.Media", b =>
                {
                    b.HasOne("Marketplace.Data.Entities.ProductDetail", "ProductDetail")
                        .WithMany("Media")
                        .HasForeignKey("ProductDetailId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("ProductDetail");
                });

            modelBuilder.Entity("Marketplace.Data.Entities.Product", b =>
                {
                    b.HasOne("Marketplace.Data.Entities.Card", "Card")
                        .WithMany("Products")
                        .HasForeignKey("CardId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Card");
                });

            modelBuilder.Entity("Marketplace.Data.Entities.ProductDetail", b =>
                {
                    b.HasOne("Marketplace.Data.Entities.Product", "Product")
                        .WithOne("ProductDetail")
                        .HasForeignKey("Marketplace.Data.Entities.ProductDetail", "ProductId");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Marketplace.Data.Entities.Tag", b =>
                {
                    b.HasOne("Marketplace.Data.Entities.Tag", null)
                        .WithMany("Tags")
                        .HasForeignKey("TagId");
                });

            modelBuilder.Entity("Marketplace.Data.Entities.UserProfile", b =>
                {
                    b.HasOne("Marketplace.Data.Entities.ApplicationUser", "ApplicationUser")
                        .WithOne("UserProfile")
                        .HasForeignKey("Marketplace.Data.Entities.UserProfile", "ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Marketplace.Data.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Marketplace.Data.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Marketplace.Data.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Marketplace.Data.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Marketplace.Data.Entities.ApplicationUser", b =>
                {
                    b.Navigation("UserProfile")
                        .IsRequired();
                });

            modelBuilder.Entity("Marketplace.Data.Entities.Card", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Marketplace.Data.Entities.Listing", b =>
                {
                    b.Navigation("Cards");
                });

            modelBuilder.Entity("Marketplace.Data.Entities.Product", b =>
                {
                    b.Navigation("ProductDetail");
                });

            modelBuilder.Entity("Marketplace.Data.Entities.ProductDetail", b =>
                {
                    b.Navigation("Documents");

                    b.Navigation("Media");
                });

            modelBuilder.Entity("Marketplace.Data.Entities.Tag", b =>
                {
                    b.Navigation("Tags");
                });
#pragma warning restore 612, 618
        }
    }
}
